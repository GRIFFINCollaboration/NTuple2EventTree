#include "Converter.hh"

#include <iostream>
#include <iomanip>

#include "TMath.h"

#include "Utilities.hh"

Converter::Converter(std::vector<std::string>& inputFileNames, const std::string& outputFileName, Settings* settings, bool writeFragmentTree)
	: fSettings(settings), fWriteFragmentTree(writeFragmentTree), fFragmentTreeEntries(0) {
		//create TChain to read in all input files
		for(auto fileName = inputFileNames.begin(); fileName != inputFileNames.end(); ++fileName) {
			if(!FileExists(*fileName)) {
				std::cerr<<"Failed to find file '"<<*fileName<<"', skipping it!"<<std::endl;
				continue;
			}
			//add sub-directory and tree name to file name
			fileName->append(fSettings->NtupleName());
			fChain.Add(fileName->c_str());
		}


		// isn't f->GetListOfKeys()->Contains("graph") what you are looking for?

		//----------------------------------------------------------------------------------------------------
		// The follwoing assumes detector 1 is placed is position 1, and detector 2 is placed in position 2, etc.
		// But that need not be the case!

		// Set LaBr3 Griffin Neighbours

		// LaBr3 detector 0 has three neighbouring Griffin detectors
		// Griffin detectors 0, 3, and 4. The "crystal" numbers for the side and extension suppressors for
		// those three detectors are 2, 1, and 4, respectively.
		LaBrGriffinNeighbours_det[0][0] = 0;
		LaBrGriffinNeighbours_det[0][1] = 3;
		LaBrGriffinNeighbours_det[0][2] = 4;
		LaBrGriffinNeighbours_cry[0][0] = 2;
		LaBrGriffinNeighbours_cry[0][1] = 0;
		LaBrGriffinNeighbours_cry[0][2] = 3;
		// next LaBr3 detector...
		LaBrGriffinNeighbours_det[1][0] = 0;
		LaBrGriffinNeighbours_det[1][1] = 1;
		LaBrGriffinNeighbours_det[1][2] = 2;
		LaBrGriffinNeighbours_cry[1][0] = 0;
		LaBrGriffinNeighbours_cry[1][1] = 2;
		LaBrGriffinNeighbours_cry[1][2] = 3;
		LaBrGriffinNeighbours_det[2][0] = 1;
		LaBrGriffinNeighbours_det[2][1] = 2;
		LaBrGriffinNeighbours_det[2][2] = 8;
		LaBrGriffinNeighbours_cry[2][0] = 0;
		LaBrGriffinNeighbours_cry[2][1] = 2;
		LaBrGriffinNeighbours_cry[2][2] = 3;
		LaBrGriffinNeighbours_det[3][0] = 2;
		LaBrGriffinNeighbours_det[3][1] = 3;
		LaBrGriffinNeighbours_det[3][2] = 10;
		LaBrGriffinNeighbours_cry[3][0] = 0;
		LaBrGriffinNeighbours_cry[3][1] = 2;
		LaBrGriffinNeighbours_cry[3][2] = 3;
		LaBrGriffinNeighbours_det[4][0] = 4;
		LaBrGriffinNeighbours_det[4][1] = 12;
		LaBrGriffinNeighbours_det[4][2] = 15;
		LaBrGriffinNeighbours_cry[4][0] = 1;
		LaBrGriffinNeighbours_cry[4][1] = 2;
		LaBrGriffinNeighbours_cry[4][2] = 0;
		LaBrGriffinNeighbours_det[5][0] = 6;
		LaBrGriffinNeighbours_det[5][1] = 12;
		LaBrGriffinNeighbours_det[5][2] = 13;
		LaBrGriffinNeighbours_cry[5][0] = 1;
		LaBrGriffinNeighbours_cry[5][1] = 0;
		LaBrGriffinNeighbours_cry[5][2] = 2;
		LaBrGriffinNeighbours_det[6][0] = 8;
		LaBrGriffinNeighbours_det[6][1] = 13;
		LaBrGriffinNeighbours_det[6][2] = 14;
		LaBrGriffinNeighbours_cry[6][0] = 1;
		LaBrGriffinNeighbours_cry[6][1] = 0;
		LaBrGriffinNeighbours_cry[6][2] = 2;
		LaBrGriffinNeighbours_det[7][0] = 10;
		LaBrGriffinNeighbours_det[7][1] = 14;
		LaBrGriffinNeighbours_det[7][2] = 15;
		LaBrGriffinNeighbours_cry[7][0] = 1;
		LaBrGriffinNeighbours_cry[7][1] = 0;
		LaBrGriffinNeighbours_cry[7][2] = 2;

		// GRIFFIN detector 1 (0 index) has two neighbouring ancillary BGO detectors
		// ancillary BGO detectors 0 and 1. The "crystal" or "segmentation" numbers for those BGOs are 1 and 2 respectively
		GriffinAncillaryBgoNeighbours_det[0][0] = 0;
		GriffinAncillaryBgoNeighbours_det[0][1] = 1;
		GriffinAncillaryBgoNeighbours_cry[0][0] = 1;
		GriffinAncillaryBgoNeighbours_cry[0][1] = 2;
		// Next GRIFFIN detector
		GriffinAncillaryBgoNeighbours_det[1][0] = 1;
		GriffinAncillaryBgoNeighbours_det[1][1] = 2;
		GriffinAncillaryBgoNeighbours_cry[1][0] = 1;
		GriffinAncillaryBgoNeighbours_cry[1][1] = 2;
		GriffinAncillaryBgoNeighbours_det[2][0] = 2;
		GriffinAncillaryBgoNeighbours_det[2][1] = 3;
		GriffinAncillaryBgoNeighbours_cry[2][0] = 1;
		GriffinAncillaryBgoNeighbours_cry[2][1] = 2;
		GriffinAncillaryBgoNeighbours_det[3][0] = 3;
		GriffinAncillaryBgoNeighbours_det[3][1] = 0;
		GriffinAncillaryBgoNeighbours_cry[3][0] = 1;
		GriffinAncillaryBgoNeighbours_cry[3][1] = 2;
		GriffinAncillaryBgoNeighbours_det[4][0] = 0;
		GriffinAncillaryBgoNeighbours_det[4][1] = 4;
		GriffinAncillaryBgoNeighbours_cry[4][0] = 1;
		GriffinAncillaryBgoNeighbours_cry[4][1] = 2;
		GriffinAncillaryBgoNeighbours_det[5][0] = 9999; // no ancillary bgo neighbours
		GriffinAncillaryBgoNeighbours_det[5][1] = 9999;
		GriffinAncillaryBgoNeighbours_cry[5][0] = 9999;
		GriffinAncillaryBgoNeighbours_cry[5][1] = 9999;
		GriffinAncillaryBgoNeighbours_det[6][0] = 1;
		GriffinAncillaryBgoNeighbours_det[6][1] = 5;
		GriffinAncillaryBgoNeighbours_cry[6][0] = 0;
		GriffinAncillaryBgoNeighbours_cry[6][1] = 0;
		GriffinAncillaryBgoNeighbours_det[7][0] = 9999;
		GriffinAncillaryBgoNeighbours_det[7][1] = 9999;
		GriffinAncillaryBgoNeighbours_cry[7][0] = 9999;
		GriffinAncillaryBgoNeighbours_cry[7][1] = 9999;
		GriffinAncillaryBgoNeighbours_det[8][0] = 2;
		GriffinAncillaryBgoNeighbours_det[8][1] = 6;
		GriffinAncillaryBgoNeighbours_cry[8][0] = 0;
		GriffinAncillaryBgoNeighbours_cry[8][1] = 0;
		GriffinAncillaryBgoNeighbours_det[9][0] = 9999;
		GriffinAncillaryBgoNeighbours_det[9][1] = 9999;
		GriffinAncillaryBgoNeighbours_cry[9][0] = 9999;
		GriffinAncillaryBgoNeighbours_cry[9][1] = 9999;
		GriffinAncillaryBgoNeighbours_det[10][0] = 3;
		GriffinAncillaryBgoNeighbours_det[10][1] = 7;
		GriffinAncillaryBgoNeighbours_cry[10][0] = 0;
		GriffinAncillaryBgoNeighbours_cry[10][1] = 0;
		GriffinAncillaryBgoNeighbours_det[11][0] = 9999;
		GriffinAncillaryBgoNeighbours_det[11][1] = 9999;
		GriffinAncillaryBgoNeighbours_cry[11][0] = 9999;
		GriffinAncillaryBgoNeighbours_cry[11][1] = 9999;
		GriffinAncillaryBgoNeighbours_det[12][0] = 4;
		GriffinAncillaryBgoNeighbours_det[12][1] = 5;
		GriffinAncillaryBgoNeighbours_cry[12][0] = 2;
		GriffinAncillaryBgoNeighbours_cry[12][1] = 1;
		GriffinAncillaryBgoNeighbours_det[13][0] = 5;
		GriffinAncillaryBgoNeighbours_det[13][1] = 6;
		GriffinAncillaryBgoNeighbours_cry[13][0] = 2;
		GriffinAncillaryBgoNeighbours_cry[13][1] = 1;
		GriffinAncillaryBgoNeighbours_det[14][0] = 6;
		GriffinAncillaryBgoNeighbours_det[14][1] = 7;
		GriffinAncillaryBgoNeighbours_cry[14][0] = 2;
		GriffinAncillaryBgoNeighbours_cry[14][1] = 1;
		GriffinAncillaryBgoNeighbours_det[15][0] = 7;
		GriffinAncillaryBgoNeighbours_det[15][1] = 4;
		GriffinAncillaryBgoNeighbours_cry[15][0] = 2;
		GriffinAncillaryBgoNeighbours_cry[15][1] = 1;

		// GRIFFIN detector 1 (0 index) has two sceptar suppressors
		// SCEPTAR detectors 0 and 1. The detector numbers for those paddles are 1 and 2 respectively
		GriffinSceptarSuppressors_det[0][0] = 0;
		GriffinSceptarSuppressors_det[0][1] = 1;
		GriffinSceptarSuppressors_det[0][2] = 9999;
		GriffinSceptarSuppressors_det[0][3] = 9999;
		// Next GRIFFIN detector
		GriffinSceptarSuppressors_det[1][0] = 2;
		GriffinSceptarSuppressors_det[1][1] = 9999;
		GriffinSceptarSuppressors_det[1][2] = 9999;
		GriffinSceptarSuppressors_det[1][3] = 9999;
		GriffinSceptarSuppressors_det[2][0] = 3;
		GriffinSceptarSuppressors_det[2][1] = 9999;
		GriffinSceptarSuppressors_det[2][2] = 9999;
		GriffinSceptarSuppressors_det[2][3] = 9999;
		GriffinSceptarSuppressors_det[3][0] = 0;
		GriffinSceptarSuppressors_det[3][1] = 4;
		GriffinSceptarSuppressors_det[3][2] = 9999;
		GriffinSceptarSuppressors_det[3][3] = 9999;
		GriffinSceptarSuppressors_det[4][0] = 5;
		GriffinSceptarSuppressors_det[4][1] = 10;
		GriffinSceptarSuppressors_det[4][2] = 9999;
		GriffinSceptarSuppressors_det[4][3] = 9999;
		GriffinSceptarSuppressors_det[5][0] = 5;
		GriffinSceptarSuppressors_det[5][1] = 10;
		GriffinSceptarSuppressors_det[5][2] = 6;
		GriffinSceptarSuppressors_det[5][3] = 11;
		GriffinSceptarSuppressors_det[6][0] = 6;
		GriffinSceptarSuppressors_det[6][1] = 11;
		GriffinSceptarSuppressors_det[6][2] = 7;
		GriffinSceptarSuppressors_det[6][3] = 12;
		GriffinSceptarSuppressors_det[7][0] = 7;
		GriffinSceptarSuppressors_det[7][1] = 12;
		GriffinSceptarSuppressors_det[7][2] = 9999;
		GriffinSceptarSuppressors_det[7][3] = 9999;
		GriffinSceptarSuppressors_det[8][0] = 7;
		GriffinSceptarSuppressors_det[8][1] = 12;
		GriffinSceptarSuppressors_det[8][2] = 8;
		GriffinSceptarSuppressors_det[8][3] = 13;
		GriffinSceptarSuppressors_det[9][0] = 8;
		GriffinSceptarSuppressors_det[9][1] = 13;
		GriffinSceptarSuppressors_det[9][2] = 9999;
		GriffinSceptarSuppressors_det[9][3] = 9999;
		GriffinSceptarSuppressors_det[10][0] = 9;
		GriffinSceptarSuppressors_det[10][1] = 14;
		GriffinSceptarSuppressors_det[10][2] = 9999;
		GriffinSceptarSuppressors_det[10][3] = 9999;
		GriffinSceptarSuppressors_det[11][0] = 9;
		GriffinSceptarSuppressors_det[11][1] = 14;
		GriffinSceptarSuppressors_det[11][2] = 5;
		GriffinSceptarSuppressors_det[11][3] = 10;
		GriffinSceptarSuppressors_det[12][0] = 16;
		GriffinSceptarSuppressors_det[12][1] = 15;
		GriffinSceptarSuppressors_det[12][2] = 9999;
		GriffinSceptarSuppressors_det[12][3] = 9999;
		GriffinSceptarSuppressors_det[13][0] = 17;
		GriffinSceptarSuppressors_det[13][1] = 9999;
		GriffinSceptarSuppressors_det[13][2] = 9999;
		GriffinSceptarSuppressors_det[13][3] = 9999;
		GriffinSceptarSuppressors_det[14][0] = 18;
		GriffinSceptarSuppressors_det[14][1] = 19;
		GriffinSceptarSuppressors_det[14][2] = 9999;
		GriffinSceptarSuppressors_det[14][3] = 9999;
		GriffinSceptarSuppressors_det[15][0] = 18;
		GriffinSceptarSuppressors_det[15][1] = 17;
		GriffinSceptarSuppressors_det[15][2] = 9999;
		GriffinSceptarSuppressors_det[15][3] = 9999;

		GriffinNeighbours_det[0][0] = 5;
		GriffinNeighbours_det[0][1] = 9999;
		GriffinNeighbours_det[0][2] = 9999;
		GriffinNeighbours_det[0][3] = 9999;
		// Next detector
		GriffinNeighbours_det[1][0] = 7;
		GriffinNeighbours_det[1][1] = 9999;
		GriffinNeighbours_det[1][2] = 9999;
		GriffinNeighbours_det[1][3] = 9999;
		GriffinNeighbours_det[2][0] = 9;
		GriffinNeighbours_det[2][1] = 9999;
		GriffinNeighbours_det[2][2] = 9999;
		GriffinNeighbours_det[2][3] = 9999;
		GriffinNeighbours_det[3][0] = 11;
		GriffinNeighbours_det[3][1] = 9999;
		GriffinNeighbours_det[3][2] = 9999;
		GriffinNeighbours_det[3][3] = 9999;
		GriffinNeighbours_det[4][0] = 5;
		GriffinNeighbours_det[4][1] = 11;
		GriffinNeighbours_det[4][2] = 9999;
		GriffinNeighbours_det[4][3] = 9999;
		GriffinNeighbours_det[5][0] = 0;
		GriffinNeighbours_det[5][1] = 12;
		GriffinNeighbours_det[5][2] = 4;
		GriffinNeighbours_det[5][3] = 6;
		GriffinNeighbours_det[6][0] = 5;
		GriffinNeighbours_det[6][1] = 7;
		GriffinNeighbours_det[6][2] = 9999;
		GriffinNeighbours_det[6][3] = 9999;
		GriffinNeighbours_det[7][0] = 1;
		GriffinNeighbours_det[7][1] = 13;
		GriffinNeighbours_det[7][2] = 6;
		GriffinNeighbours_det[7][3] = 8;
		GriffinNeighbours_det[8][0] = 7;
		GriffinNeighbours_det[8][1] = 9;
		GriffinNeighbours_det[8][2] = 9999;
		GriffinNeighbours_det[8][3] = 9999;
		GriffinNeighbours_det[9][0] = 2;
		GriffinNeighbours_det[9][1] = 14;
		GriffinNeighbours_det[9][2] = 8;
		GriffinNeighbours_det[9][3] = 10;
		GriffinNeighbours_det[10][0] = 9;
		GriffinNeighbours_det[10][1] = 11;
		GriffinNeighbours_det[10][2] = 9999;
		GriffinNeighbours_det[10][3] = 9999;
		GriffinNeighbours_det[11][0] = 3;
		GriffinNeighbours_det[11][1] = 15;
		GriffinNeighbours_det[11][2] = 4;
		GriffinNeighbours_det[11][3] = 10;
		GriffinNeighbours_det[12][0] = 5;
		GriffinNeighbours_det[12][1] = 9999;
		GriffinNeighbours_det[12][2] = 9999;
		GriffinNeighbours_det[12][3] = 9999;
		GriffinNeighbours_det[13][0] = 7;
		GriffinNeighbours_det[13][1] = 9999;
		GriffinNeighbours_det[13][2] = 9999;
		GriffinNeighbours_det[13][3] = 9999;
		GriffinNeighbours_det[14][0] = 9;
		GriffinNeighbours_det[14][1] = 9999;
		GriffinNeighbours_det[14][2] = 9999;
		GriffinNeighbours_det[14][3] = 9999;
		GriffinNeighbours_det[15][0] = 11;
		GriffinNeighbours_det[15][1] = 9999;
		GriffinNeighbours_det[15][2] = 9999;
		GriffinNeighbours_det[15][3] = 9999;

		/////////////////////////////////////////////////////////////////////
		// Coords for GRIFFIN
		// Note that the GRIFFIN lampshade angles are rotated by 45 degrees with respect to those of TIGRESS.
		// Modified coords for TIGRESS are below!
		/////////////////////////////////////////////////////////////////////
		double thisGriffinDetCoords[16][5];
		// theta
		thisGriffinDetCoords[0][0] 	= 45.0;
		thisGriffinDetCoords[1][0] 	= 45.0;
		thisGriffinDetCoords[2][0] 	= 45.0;
		thisGriffinDetCoords[3][0] 	= 45.0;
		thisGriffinDetCoords[4][0] 	= 90.0;
		thisGriffinDetCoords[5][0] 	= 90.0;
		thisGriffinDetCoords[6][0] 	= 90.0;
		thisGriffinDetCoords[7][0] 	= 90.0;
		thisGriffinDetCoords[8][0] 	= 90.0;
		thisGriffinDetCoords[9][0] 	= 90.0;
		thisGriffinDetCoords[10][0] 	= 90.0;
		thisGriffinDetCoords[11][0] 	= 90.0;
		thisGriffinDetCoords[12][0] 	= 135.0;
		thisGriffinDetCoords[13][0] 	= 135.0;
		thisGriffinDetCoords[14][0] 	= 135.0;
		thisGriffinDetCoords[15][0] 	= 135.0;
		// phi
		thisGriffinDetCoords[0][1] 	= 67.5;
		thisGriffinDetCoords[1][1] 	= 157.5;
		thisGriffinDetCoords[2][1] 	= 247.5;
		thisGriffinDetCoords[3][1] 	= 337.5;
		thisGriffinDetCoords[4][1] 	= 22.5;
		thisGriffinDetCoords[5][1] 	= 67.5;
		thisGriffinDetCoords[6][1] 	= 112.5;
		thisGriffinDetCoords[7][1] 	= 157.5;
		thisGriffinDetCoords[8][1] 	= 202.5;
		thisGriffinDetCoords[9][1] 	= 247.5;
		thisGriffinDetCoords[10][1] 	= 292.5;
		thisGriffinDetCoords[11][1] 	= 337.5;
		thisGriffinDetCoords[12][1] 	= 67.5;
		thisGriffinDetCoords[13][1] 	= 157.5;
		thisGriffinDetCoords[14][1] 	= 247.5;
		thisGriffinDetCoords[15][1] 	= 337.5;
		// yaw (alpha)
		thisGriffinDetCoords[0][2] 	= 0.0;
		thisGriffinDetCoords[1][2] 	= 0.0;
		thisGriffinDetCoords[2][2] 	= 0.0;
		thisGriffinDetCoords[3][2] 	= 0.0;
		thisGriffinDetCoords[4][2] 	= 0.0;
		thisGriffinDetCoords[5][2] 	= 0.0;
		thisGriffinDetCoords[6][2] 	= 0.0;
		thisGriffinDetCoords[7][2] 	= 0.0;
		thisGriffinDetCoords[8][2] 	= 0.0;
		thisGriffinDetCoords[9][2] 	= 0.0;
		thisGriffinDetCoords[10][2] 	= 0.0;
		thisGriffinDetCoords[11][2] 	= 0.0;
		thisGriffinDetCoords[12][2] 	= 0.0;
		thisGriffinDetCoords[13][2] 	= 0.0;
		thisGriffinDetCoords[14][2] 	= 0.0;
		thisGriffinDetCoords[15][2] 	= 0.0;
		// pitch (beta)
		thisGriffinDetCoords[0][3] 	= -45.0;
		thisGriffinDetCoords[1][3] 	= -45.0;
		thisGriffinDetCoords[2][3] 	= -45.0;
		thisGriffinDetCoords[3][3] 	= -45.0;
		thisGriffinDetCoords[4][3] 	= 0.0;
		thisGriffinDetCoords[5][3] 	= 0.0;
		thisGriffinDetCoords[6][3] 	= 0.0;
		thisGriffinDetCoords[7][3] 	= 0.0;
		thisGriffinDetCoords[8][3] 	= 0.0;
		thisGriffinDetCoords[9][3] 	= 0.0;
		thisGriffinDetCoords[10][3] 	= 0.0;
		thisGriffinDetCoords[11][3] 	= 0.0;
		thisGriffinDetCoords[12][3] 	= 45.0;
		thisGriffinDetCoords[13][3] 	= 45.0;
		thisGriffinDetCoords[14][3] 	= 45.0;
		thisGriffinDetCoords[15][3] 	= 45.0;
		// roll (gamma)
		thisGriffinDetCoords[0][4] 	= 67.5;
		thisGriffinDetCoords[1][4] 	= 157.5;
		thisGriffinDetCoords[2][4] 	= 247.5;
		thisGriffinDetCoords[3][4] 	= 337.5;
		thisGriffinDetCoords[4][4] 	= 22.5;
		thisGriffinDetCoords[5][4] 	= 67.5;
		thisGriffinDetCoords[6][4] 	= 112.5;
		thisGriffinDetCoords[7][4] 	= 157.5;
		thisGriffinDetCoords[8][4] 	= 202.5;
		thisGriffinDetCoords[9][4] 	= 247.5;
		thisGriffinDetCoords[10][4] 	= 292.5;
		thisGriffinDetCoords[11][4] 	= 337.5;
		thisGriffinDetCoords[12][4] 	= 67.5;
		thisGriffinDetCoords[13][4] 	= 157.5;
		thisGriffinDetCoords[14][4] 	= 247.5;
		thisGriffinDetCoords[15][4] 	= 337.5;
		memcpy(GriffinDetCoords, thisGriffinDetCoords, sizeof(GriffinDetCoords));


		// Detector Method
		double thisGriffinDetMap[16][16] = {
			{0,60,90,60,60,45,60,90,120,135,120,90,90,120,180,120},
			{60,0,60,90,120,90,60,45,60,90,120,135,120,90,120,180},
			{90,60,0,60,120,135,120,90,60,45,60,90,180,120,90,120},
			{60,90,60,0,60,90,120,135,120,90,60,45,120,180,120,90},
			{60,120,120,60,0,45,90,135,180,135,90,45,60,120,120,60},
			{45,90,135,90,45,0,45,90,135,180,135,90,45,90,135,90},
			{60,60,120,120,90,45,0,45,90,135,180,135,60,60,120,120},
			{90,45,90,135,135,90,45,0,45,90,135,180,90,45,90,135},
			{120,60,60,120,180,135,90,45,0,45,90,135,120,60,60,120},
			{135,90,45,90,135,180,135,90,45,0,45,90,135,90,45,90},
			{120,120,60,60,90,135,180,135,90,45,0,45,120,120,60,60},
			{90,135,90,45,45,90,135,180,135,90,45,0,90,135,90,45},
			{90,120,180,120,60,45,60,90,120,135,120,90,0,60,90,60},
			{120,90,120,180,120,90,60,45,60,90,120,135,60,0,60,90},
			{180,120,90,120,120,135,120,90,60,45,60,90,90,60,0,60},
			{120,180,120,90,60,90,120,135,120,90,60,45,60,90,60,0}
		};
		memcpy(GriffinDetMap, thisGriffinDetMap, sizeof(GriffinDetMap));

		double thisGriffinDetMapCombos[7][2] = {
			{0, 16},
			{45, 32},
			{60, 48},
			{90, 64},
			{120, 48},
			{135, 32},
			{180, 16}
		};
		memcpy(GriffinDetMapCombos, thisGriffinDetMapCombos, sizeof(GriffinDetMapCombos));

		double thisGriffinCryMap[64][64] = {
			{0.0000, 19.131, 27.184, 19.131, 49.631, 60.157, 46.607, 33.166, 72.817, 91.582, 88.418, 69.473, 49.631, 65.195, 76.694, 62.720, 60.157, 76.694, 86.721, 71.054, 44.341, 63.403, 66.891, 48.703, 53.690, 71.054, 65.195, 46.607, 78.429, 93.836, 82.965, 67.049, 103.31, 119.84, 108.95, 93.279, 116.60, 135.66, 131.30, 113.11, 108.95, 126.31, 133.39, 114.81, 86.164, 101.57, 112.95, 97.035, 88.418, 107.18, 110.53, 91.582, 114.81, 130.37, 117.28, 103.31, 160.87, 180.00, 160.87, 152.82, 119.84, 130.37, 146.83, 133.39},
			{19.131, 0.0000, 19.131, 27.184, 65.195, 71.054, 53.690, 46.607, 91.582, 110.53, 107.18, 88.418, 60.157, 71.054, 86.721, 76.694, 49.631, 62.720, 76.694, 65.195, 25.235, 44.341, 48.703, 31.860, 46.607, 60.157, 49.631, 33.166, 82.965, 93.836, 78.429, 67.049, 117.28, 130.37, 114.81, 103.31, 135.66, 154.77, 148.14, 131.30, 119.84, 133.39, 146.83, 130.37, 86.164, 97.035, 112.95, 101.57, 69.473, 88.418, 91.582, 72.817, 108.95, 119.84, 103.31, 93.279, 180.00, 160.87, 152.82, 160.87, 108.95, 114.81, 133.39, 126.31},
			{27.184, 19.131, 0.0000, 19.131, 76.694, 86.721, 71.054, 60.157, 88.418, 107.18, 110.53, 91.582, 46.607, 53.690, 71.054, 65.195, 33.166, 49.631, 60.157, 46.607, 31.860, 48.703, 44.341, 25.235, 65.195, 76.694, 62.720, 49.631, 101.57, 112.95, 97.035, 86.164, 130.37, 146.83, 133.39, 119.84, 131.30, 148.14, 154.77, 135.66, 103.31, 114.81, 130.37, 117.28, 67.049, 78.429, 93.836, 82.965, 72.817, 91.582, 88.418, 69.473, 126.31, 133.39, 114.81, 108.95, 160.87, 152.82, 160.87, 180.00, 93.279, 103.31, 119.84, 108.95},
			{19.131, 27.184, 19.131, 0.0000, 62.720, 76.694, 65.195, 49.631, 69.473, 88.418, 91.582, 72.817, 33.166, 46.607, 60.157, 49.631, 46.607, 65.195, 71.054, 53.690, 48.703, 66.891, 63.403, 44.341, 71.054, 86.721, 76.694, 60.157, 97.035, 112.95, 101.57, 86.164, 114.81, 133.39, 126.31, 108.95, 113.11, 131.30, 135.66, 116.60, 93.279, 108.95, 119.84, 103.31, 67.049, 82.965, 93.836, 78.429, 91.582, 110.53, 107.18, 88.418, 133.39, 146.83, 130.37, 119.84, 152.82, 160.87, 180.00, 160.87, 103.31, 117.28, 130.37, 114.81},
			{49.631, 65.195, 76.694, 62.720, 0.0000, 19.131, 27.184, 19.131, 49.631, 60.157, 46.607, 33.166, 72.817, 91.582, 88.418, 69.473, 108.95, 126.31, 133.39, 114.81, 86.164, 101.57, 112.95, 97.035, 60.157, 76.694, 86.721, 71.054, 44.341, 63.403, 66.891, 48.703, 53.690, 71.054, 65.195, 46.607, 78.429, 93.836, 82.965, 67.049, 103.31, 119.84, 108.95, 93.279, 116.60, 135.66, 131.30, 113.11, 119.84, 130.37, 146.83, 133.39, 88.418, 107.18, 110.53, 91.582, 114.81, 130.37, 117.28, 103.31, 160.87, 180.00, 160.87, 152.82},
			{60.157, 71.054, 86.721, 76.694, 19.131, 0.0000, 19.131, 27.184, 65.195, 71.054, 53.690, 46.607, 91.582, 110.53, 107.18, 88.418, 119.84, 133.39, 146.83, 130.37, 86.164, 97.035, 112.95, 101.57, 49.631, 62.720, 76.694, 65.195, 25.235, 44.341, 48.703, 31.860, 46.607, 60.157, 49.631, 33.166, 82.965, 93.836, 78.429, 67.049, 117.28, 130.37, 114.81, 103.31, 135.66, 154.77, 148.14, 131.30, 108.95, 114.81, 133.39, 126.31, 69.473, 88.418, 91.582, 72.817, 108.95, 119.84, 103.31, 93.279, 180.00, 160.87, 152.82, 160.87},
			{46.607, 53.690, 71.054, 65.195, 27.184, 19.131, 0.0000, 19.131, 76.694, 86.721, 71.054, 60.157, 88.418, 107.18, 110.53, 91.582, 103.31, 114.81, 130.37, 117.28, 67.049, 78.429, 93.836, 82.965, 33.166, 49.631, 60.157, 46.607, 31.860, 48.703, 44.341, 25.235, 65.195, 76.694, 62.720, 49.631, 101.57, 112.95, 97.035, 86.164, 130.37, 146.83, 133.39, 119.84, 131.30, 148.14, 154.77, 135.66, 93.279, 103.31, 119.84, 108.95, 72.817, 91.582, 88.418, 69.473, 126.31, 133.39, 114.81, 108.95, 160.87, 152.82, 160.87, 180},
			{33.166, 46.607, 60.157, 49.631, 19.131, 27.184, 19.131, 0.0000, 62.720, 76.694, 65.195, 49.631, 69.473, 88.418, 91.582, 72.817, 93.279, 108.95, 119.84, 103.31, 67.049, 82.965, 93.836, 78.429, 46.607, 65.195, 71.054, 53.690, 48.703, 66.891, 63.403, 44.341, 71.054, 86.721, 76.694, 60.157, 97.035, 112.95, 101.57, 86.164, 114.81, 133.39, 126.31, 108.95, 113.11, 131.30, 135.66, 116.60, 103.31, 117.28, 130.37, 114.81, 91.582, 110.53, 107.18, 88.418, 133.39, 146.83, 130.37, 119.84, 152.82, 160.87, 180.00, 160.87},
			{72.817, 91.582, 88.418, 69.473, 49.631, 65.195, 76.694, 62.720, 0.0000, 19.131, 27.184, 19.131, 49.631, 60.157, 46.607, 33.166, 103.31, 119.84, 108.95, 93.279, 116.60, 135.66, 131.30, 113.11, 108.95, 126.31, 133.39, 114.81, 86.164, 101.57, 112.95, 97.035, 60.157, 76.694, 86.721, 71.054, 44.341, 63.403, 66.891, 48.703, 53.690, 71.054, 65.195, 46.607, 78.429, 93.836, 82.965, 67.049, 160.87, 180.00, 160.87, 152.82, 119.84, 130.37, 146.83, 133.39, 88.418, 107.18, 110.53, 91.582, 114.81, 130.37, 117.28, 103.31},
			{91.582, 110.53, 107.18, 88.418, 60.157, 71.054, 86.721, 76.694, 19.131, 0.0000, 19.131, 27.184, 65.195, 71.054, 53.690, 46.607, 117.28, 130.37, 114.81, 103.31, 135.66, 154.77, 148.14, 131.30, 119.84, 133.39, 146.83, 130.37, 86.164, 97.035, 112.95, 101.57, 49.631, 62.720, 76.694, 65.195, 25.235, 44.341, 48.703, 31.860, 46.607, 60.157, 49.631, 33.166, 82.965, 93.836, 78.429, 67.049, 180.00, 160.87, 152.82, 160.87, 108.95, 114.81, 133.39, 126.31, 69.473, 88.418, 91.582, 72.817, 108.95, 119.84, 103.31, 93.279},
			{88.418, 107.18, 110.53, 91.582, 46.607, 53.690, 71.054, 65.195, 27.184, 19.131, 0.0000, 19.131, 76.694, 86.721, 71.054, 60.157, 130.37, 146.83, 133.39, 119.84, 131.30, 148.14, 154.77, 135.66, 103.31, 114.81, 130.37, 117.28, 67.049, 78.429, 93.836, 82.965, 33.166, 49.631, 60.157, 46.607, 31.860, 48.703, 44.341, 25.235, 65.195, 76.694, 62.720, 49.631, 101.57, 112.95, 97.035, 86.164, 160.87, 152.82, 160.87, 180.00, 93.279, 103.31, 119.84, 108.95, 72.817, 91.582, 88.418, 69.473, 126.31, 133.39, 114.81, 108.95},
			{69.473, 88.418, 91.582, 72.817, 33.166, 46.607, 60.157, 49.631, 19.131, 27.184, 19.131, 0.0000, 62.720, 76.694, 65.195, 49.631, 114.81, 133.39, 126.31, 108.95, 113.11, 131.30, 135.66, 116.60, 93.279, 108.95, 119.84, 103.31, 67.049, 82.965, 93.836, 78.429, 46.607, 65.195, 71.054, 53.690, 48.703, 66.891, 63.403, 44.341, 71.054, 86.721, 76.694, 60.157, 97.035, 112.95, 101.57, 86.164, 152.82, 160.87, 180.00, 160.87, 103.31, 117.28, 130.37, 114.81, 91.582, 110.53, 107.18, 88.418, 133.39, 146.83, 130.37, 119.84},
			{49.631, 60.157, 46.607, 33.166, 72.817, 91.582, 88.418, 69.473, 49.631, 65.195, 76.694, 62.720, 0.0000, 19.131, 27.184, 19.131, 53.690, 71.054, 65.195, 46.607, 78.429, 93.836, 82.965, 67.049, 103.31, 119.84, 108.95, 93.279, 116.60, 135.66, 131.30, 113.11, 108.95, 126.31, 133.39, 114.81, 86.164, 101.57, 112.95, 97.035, 60.157, 76.694, 86.721, 71.054, 44.341, 63.403, 66.891, 48.703, 114.81, 130.37, 117.28, 103.31, 160.87, 180.00, 160.87, 152.82, 119.84, 130.37, 146.83, 133.39, 88.418, 107.18, 110.53, 91.582},
			{65.195, 71.054, 53.690, 46.607, 91.582, 110.53, 107.18, 88.418, 60.157, 71.054, 86.721, 76.694, 19.131, 0.0000, 19.131, 27.184, 46.607, 60.157, 49.631, 33.166, 82.965, 93.836, 78.429, 67.049, 117.28, 130.37, 114.81, 103.31, 135.66, 154.77, 148.14, 131.30, 119.84, 133.39, 146.83, 130.37, 86.164, 97.035, 112.95, 101.57, 49.631, 62.720, 76.694, 65.195, 25.235, 44.341, 48.703, 31.860, 108.95, 119.84, 103.31, 93.279, 180.00, 160.87, 152.82, 160.87, 108.95, 114.81, 133.39, 126.31, 69.473, 88.418, 91.582, 72.817},
			{76.694, 86.721, 71.054, 60.157, 88.418, 107.18, 110.53, 91.582, 46.607, 53.690, 71.054, 65.195, 27.184, 19.131, 0.0000, 19.131, 65.195, 76.694, 62.720, 49.631, 101.57, 112.95, 97.035, 86.164, 130.37, 146.83, 133.39, 119.84, 131.30, 148.14, 154.77, 135.66, 103.31, 114.81, 130.37, 117.28, 67.049, 78.429, 93.836, 82.965, 33.166, 49.631, 60.157, 46.607, 31.860, 48.703, 44.341, 25.235, 126.31, 133.39, 114.81, 108.95, 160.87, 152.82, 160.87, 180.00, 93.279, 103.31, 119.84, 108.95, 72.817, 91.582, 88.418, 69.473},
			{62.720, 76.694, 65.195, 49.631, 69.473, 88.418, 91.582, 72.817, 33.166, 46.607, 60.157, 49.631, 19.131, 27.184, 19.131, 0.0000, 71.054, 86.721, 76.694, 60.157, 97.035, 112.95, 101.57, 86.164, 114.81, 133.39, 126.31, 108.95, 113.11, 131.30, 135.66, 116.60, 93.279, 108.95, 119.84, 103.31, 67.049, 82.965, 93.836, 78.429, 46.607, 65.195, 71.054, 53.690, 48.703, 66.891, 63.403, 44.341, 133.39, 146.83, 130.37, 119.84, 152.82, 160.87, 180.00, 160.87, 103.31, 117.28, 130.37, 114.81, 91.582, 110.53, 107.18, 88.418},
			{60.157, 49.631, 33.166, 46.607, 108.95, 119.84, 103.31, 93.279, 103.31, 117.28, 130.37, 114.81, 53.690, 46.607, 65.195, 71.054, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 62.720, 76.694, 65.195, 49.631, 133.39, 126.31, 108.95, 114.81, 130.37, 119.84, 133.39, 146.83, 60.157, 71.054, 86.721, 76.694},
			{76.694, 62.720, 49.631, 65.195, 126.31, 133.39, 114.81, 108.95, 119.84, 130.37, 146.83, 133.39, 71.054, 60.157, 76.694, 86.721, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 49.631, 60.157, 46.607, 33.166, 119.84, 108.95, 93.279, 103.31, 117.28, 103.31, 114.81, 130.37, 46.607, 53.690, 71.054, 65.195},
			{86.721, 76.694, 60.157, 71.054, 133.39, 146.83, 130.37, 119.84, 108.95, 114.81, 133.39, 126.31, 65.195, 49.631, 62.720, 76.694, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 65.195, 71.054, 53.690, 46.607, 130.37, 114.81, 103.31, 117.28, 103.31, 93.279, 108.95, 119.84, 33.166, 46.607, 60.157, 49.631},
			{71.054, 65.195, 46.607, 53.690, 114.81, 130.37, 117.28, 103.31, 93.279, 103.31, 119.84, 108.95, 46.607, 33.166, 49.631, 60.157, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 76.694, 86.721, 71.054, 60.157, 146.83, 133.39, 119.84, 130.37, 114.81, 108.95, 126.31, 133.39, 49.631, 65.195, 76.694, 62.720},
			{44.341, 25.235, 31.860, 48.703, 86.164, 86.164, 67.049, 67.049, 116.60, 135.66, 131.30, 113.11, 78.429, 82.965, 101.57, 97.035, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 63.403, 66.891, 48.703, 97.035, 101.57, 82.965, 78.429, 154.77, 135.66, 131.30, 148.14, 93.836, 93.836, 112.95, 112.95},
			{63.403, 44.341, 48.703, 66.891, 101.57, 97.035, 78.429, 82.965, 135.66, 154.77, 148.14, 131.30, 93.836, 93.836, 112.95, 112.95, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 25.235, 44.341, 48.703, 31.860, 86.164, 86.164, 67.049, 67.049, 135.66, 116.60, 113.11, 131.30, 82.965, 78.429, 97.035, 101.57},
			{66.891, 48.703, 44.341, 63.403, 112.95, 112.95, 93.836, 93.836, 131.30, 148.14, 154.77, 135.66, 82.965, 78.429, 97.035, 101.57, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 48.703, 44.341, 25.235, 101.57, 97.035, 78.429, 82.965, 131.30, 113.11, 116.60, 135.66, 67.049, 67.049, 86.164, 86.164},
			{48.703, 31.860, 25.235, 44.341, 97.035, 101.57, 82.965, 78.429, 113.11, 131.30, 135.66, 116.60, 67.049, 67.049, 86.164, 86.164, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 48.703, 66.891, 63.403, 44.341, 112.95, 112.95, 93.836, 93.836, 148.14, 131.30, 135.66, 154.77, 78.429, 82.965, 101.57, 97.035},
			{53.690, 46.607, 65.195, 71.054, 60.157, 49.631, 33.166, 46.607, 108.95, 119.84, 103.31, 93.279, 103.31, 117.28, 130.37, 114.81, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 60.157, 71.054, 86.721, 76.694, 62.720, 76.694, 65.195, 49.631, 133.39, 126.31, 108.95, 114.81, 130.37, 119.84, 133.39, 146.83},
			{71.054, 60.157, 76.694, 86.721, 76.694, 62.720, 49.631, 65.195, 126.31, 133.39, 114.81, 108.95, 119.84, 130.37, 146.83, 133.39, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 46.607, 53.690, 71.054, 65.195, 49.631, 60.157, 46.607, 33.166, 119.84, 108.95, 93.279, 103.31, 117.28, 103.31, 114.81, 130.37},
			{65.195, 49.631, 62.720, 76.694, 86.721, 76.694, 60.157, 71.054, 133.39, 146.83, 130.37, 119.84, 108.95, 114.81, 133.39, 126.31, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 33.166, 46.607, 60.157, 49.631, 65.195, 71.054, 53.690, 46.607, 130.37, 114.81, 103.31, 117.28, 103.31, 93.279, 108.95, 119.84},
			{46.607, 33.166, 49.631, 60.157, 71.054, 65.195, 46.607, 53.690, 114.81, 130.37, 117.28, 103.31, 93.279, 103.31, 119.84, 108.95, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 49.631, 65.195, 76.694, 62.720, 76.694, 86.721, 71.054, 60.157, 146.83, 133.39, 119.84, 130.37, 114.81, 108.95, 126.31, 133.39},
			{78.429, 82.965, 101.57, 97.035, 44.341, 25.235, 31.860, 48.703, 86.164, 86.164, 67.049, 67.049, 116.60, 135.66, 131.30, 113.11, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 93.836, 93.836, 112.95, 112.95, 44.341, 63.403, 66.891, 48.703, 97.035, 101.57, 82.965, 78.429, 154.77, 135.66, 131.30, 148.14},
			{93.836, 93.836, 112.95, 112.95, 63.403, 44.341, 48.703, 66.891, 101.57, 97.035, 78.429, 82.965, 135.66, 154.77, 148.14, 131.30, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 82.965, 78.429, 97.035, 101.57, 25.235, 44.341, 48.703, 31.860, 86.164, 86.164, 67.049, 67.049, 135.66, 116.60, 113.11, 131.30},
			{82.965, 78.429, 97.035, 101.57, 66.891, 48.703, 44.341, 63.403, 112.95, 112.95, 93.836, 93.836, 131.30, 148.14, 154.77, 135.66, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 67.049, 67.049, 86.164, 86.164, 31.860, 48.703, 44.341, 25.235, 101.57, 97.035, 78.429, 82.965, 131.30, 113.11, 116.60, 135.66},
			{67.049, 67.049, 86.164, 86.164, 48.703, 31.860, 25.235, 44.341, 97.035, 101.57, 82.965, 78.429, 113.11, 131.30, 135.66, 116.60, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 78.429, 82.965, 101.57, 97.035, 48.703, 66.891, 63.403, 44.341, 112.95, 112.95, 93.836, 93.836, 148.14, 131.30, 135.66, 154.77},
			{103.31, 117.28, 130.37, 114.81, 53.690, 46.607, 65.195, 71.054, 60.157, 49.631, 33.166, 46.607, 108.95, 119.84, 103.31, 93.279, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 130.37, 119.84, 133.39, 146.83, 60.157, 71.054, 86.721, 76.694, 62.720, 76.694, 65.195, 49.631, 133.39, 126.31, 108.95, 114.81},
			{119.84, 130.37, 146.83, 133.39, 71.054, 60.157, 76.694, 86.721, 76.694, 62.720, 49.631, 65.195, 126.31, 133.39, 114.81, 108.95, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 117.28, 103.31, 114.81, 130.37, 46.607, 53.690, 71.054, 65.195, 49.631, 60.157, 46.607, 33.166, 119.84, 108.95, 93.279, 103.31},
			{108.95, 114.81, 133.39, 126.31, 65.195, 49.631, 62.720, 76.694, 86.721, 76.694, 60.157, 71.054, 133.39, 146.83, 130.37, 119.84, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 103.31, 93.279, 108.95, 119.84, 33.166, 46.607, 60.157, 49.631, 65.195, 71.054, 53.690, 46.607, 130.37, 114.81, 103.31, 117.28},
			{93.279, 103.31, 119.84, 108.95, 46.607, 33.166, 49.631, 60.157, 71.054, 65.195, 46.607, 53.690, 114.81, 130.37, 117.28, 103.31, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 114.81, 108.95, 126.31, 133.39, 49.631, 65.195, 76.694, 62.720, 76.694, 86.721, 71.054, 60.157, 146.83, 133.39, 119.84, 130.37},
			{116.60, 135.66, 131.30, 113.11, 78.429, 82.965, 101.57, 97.035, 44.341, 25.235, 31.860, 48.703, 86.164, 86.164, 67.049, 67.049, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 154.77, 135.66, 131.30, 148.14, 93.836, 93.836, 112.95, 112.95, 44.341, 63.403, 66.891, 48.703, 97.035, 101.57, 82.965, 78.429},
			{135.66, 154.77, 148.14, 131.30, 93.836, 93.836, 112.95, 112.95, 63.403, 44.341, 48.703, 66.891, 101.57, 97.035, 78.429, 82.965, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 116.60, 113.11, 131.30, 82.965, 78.429, 97.035, 101.57, 25.235, 44.341, 48.703, 31.860, 86.164, 86.164, 67.049, 67.049},
			{131.30, 148.14, 154.77, 135.66, 82.965, 78.429, 97.035, 101.57, 66.891, 48.703, 44.341, 63.403, 112.95, 112.95, 93.836, 93.836, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 131.30, 113.11, 116.60, 135.66, 67.049, 67.049, 86.164, 86.164, 31.860, 48.703, 44.341, 25.235, 101.57, 97.035, 78.429, 82.965},
			{113.11, 131.30, 135.66, 116.60, 67.049, 67.049, 86.164, 86.164, 48.703, 31.860, 25.235, 44.341, 97.035, 101.57, 82.965, 78.429, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 131.30, 135.66, 154.77, 78.429, 82.965, 101.57, 97.035, 48.703, 66.891, 63.403, 44.341, 112.95, 112.95, 93.836, 93.836},
			{108.95, 119.84, 103.31, 93.279, 103.31, 117.28, 130.37, 114.81, 53.690, 46.607, 65.195, 71.054, 60.157, 49.631, 33.166, 46.607, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 44.341, 48.703, 31.860, 25.235, 133.39, 126.31, 108.95, 114.81, 130.37, 119.84, 133.39, 146.83, 60.157, 71.054, 86.721, 76.694, 62.720, 76.694, 65.195, 49.631},
			{126.31, 133.39, 114.81, 108.95, 119.84, 130.37, 146.83, 133.39, 71.054, 60.157, 76.694, 86.721, 76.694, 62.720, 49.631, 65.195, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 48.703, 44.341, 25.235, 31.860, 119.84, 108.95, 93.279, 103.31, 117.28, 103.31, 114.81, 130.37, 46.607, 53.690, 71.054, 65.195, 49.631, 60.157, 46.607, 33.166},
			{133.39, 146.83, 130.37, 119.84, 108.95, 114.81, 133.39, 126.31, 65.195, 49.631, 62.720, 76.694, 86.721, 76.694, 60.157, 71.054, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 66.891, 63.403, 44.341, 48.703, 130.37, 114.81, 103.31, 117.28, 103.31, 93.279, 108.95, 119.84, 33.166, 46.607, 60.157, 49.631, 65.195, 71.054, 53.690, 46.607},
			{114.81, 130.37, 117.28, 103.31, 93.279, 103.31, 119.84, 108.95, 46.607, 33.166, 49.631, 60.157, 71.054, 65.195, 46.607, 53.690, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 63.403, 66.891, 48.703, 44.341, 146.83, 133.39, 119.84, 130.37, 114.81, 108.95, 126.31, 133.39, 49.631, 65.195, 76.694, 62.720, 76.694, 86.721, 71.054, 60.157},
			{86.164, 86.164, 67.049, 67.049, 116.60, 135.66, 131.30, 113.11, 78.429, 82.965, 101.57, 97.035, 44.341, 25.235, 31.860, 48.703, 44.341, 48.703, 31.860, 25.235, 88.418, 91.582, 72.817, 69.473, 131.30, 135.66, 116.60, 113.11, 160.87, 180.00, 160.87, 152.82, 131.30, 135.66, 154.77, 148.14, 88.418, 91.582, 110.53, 107.18, 44.341, 48.703, 66.891, 63.403, 0.0000, 19.131, 27.184, 19.131, 97.035, 101.57, 82.965, 78.429, 154.77, 135.66, 131.30, 148.14, 93.836, 93.836, 112.95, 112.95, 44.341, 63.403, 66.891, 48.703},
			{101.57, 97.035, 78.429, 82.965, 135.66, 154.77, 148.14, 131.30, 93.836, 93.836, 112.95, 112.95, 63.403, 44.341, 48.703, 66.891, 48.703, 44.341, 25.235, 31.860, 91.582, 88.418, 69.473, 72.817, 135.66, 131.30, 113.11, 116.60, 180.00, 160.87, 152.82, 160.87, 135.66, 131.30, 148.14, 154.77, 91.582, 88.418, 107.18, 110.53, 48.703, 44.341, 63.403, 66.891, 19.131, 0.0000, 19.131, 27.184, 86.164, 86.164, 67.049, 67.049, 135.66, 116.60, 113.11, 131.30, 82.965, 78.429, 97.035, 101.57, 25.235, 44.341, 48.703, 31.860},
			{112.95, 112.95, 93.836, 93.836, 131.30, 148.14, 154.77, 135.66, 82.965, 78.429, 97.035, 101.57, 66.891, 48.703, 44.341, 63.403, 66.891, 63.403, 44.341, 48.703, 110.53, 107.18, 88.418, 91.582, 154.77, 148.14, 131.30, 135.66, 160.87, 152.82, 160.87, 180.00, 116.60, 113.11, 131.30, 135.66, 72.817, 69.473, 88.418, 91.582, 31.860, 25.235, 44.341, 48.703, 27.184, 19.131, 0.0000, 19.131, 101.57, 97.035, 78.429, 82.965, 131.30, 113.11, 116.60, 135.66, 67.049, 67.049, 86.164, 86.164, 31.860, 48.703, 44.341, 25.235},
			{97.035, 101.57, 82.965, 78.429, 113.11, 131.30, 135.66, 116.60, 67.049, 67.049, 86.164, 86.164, 48.703, 31.860, 25.235, 44.341, 63.403, 66.891, 48.703, 44.341, 107.18, 110.53, 91.582, 88.418, 148.14, 154.77, 135.66, 131.30, 152.82, 160.87, 180.00, 160.87, 113.11, 116.60, 135.66, 131.30, 69.473, 72.817, 91.582, 88.418, 25.235, 31.860, 48.703, 44.341, 19.131, 27.184, 19.131, 0.0000, 112.95, 112.95, 93.836, 93.836, 148.14, 131.30, 135.66, 154.77, 78.429, 82.965, 101.57, 97.035, 48.703, 66.891, 63.403, 44.341},
			{88.418, 69.473, 72.817, 91.582, 119.84, 108.95, 93.279, 103.31, 160.87, 180.00, 160.87, 152.82, 114.81, 108.95, 126.31, 133.39, 62.720, 49.631, 65.195, 76.694, 44.341, 25.235, 31.860, 48.703, 60.157, 46.607, 33.166, 49.631, 93.836, 82.965, 67.049, 78.429, 130.37, 117.28, 103.31, 114.81, 154.77, 135.66, 131.30, 148.14, 133.39, 119.84, 130.37, 146.83, 97.035, 86.164, 101.57, 112.95, 0.0000, 19.131, 27.184, 19.131, 71.054, 65.195, 46.607, 53.690, 110.53, 91.582, 88.418, 107.18, 71.054, 60.157, 76.694, 86.721},
			{107.18, 88.418, 91.582, 110.53, 130.37, 114.81, 103.31, 117.28, 180.00, 160.87, 152.82, 160.87, 130.37, 119.84, 133.39, 146.83, 76.694, 60.157, 71.054, 86.721, 63.403, 44.341, 48.703, 66.891, 71.054, 53.690, 46.607, 65.195, 93.836, 78.429, 67.049, 82.965, 119.84, 103.31, 93.279, 108.95, 135.66, 116.60, 113.11, 131.30, 126.31, 108.95, 114.81, 133.39, 101.57, 86.164, 97.035, 112.95, 19.131, 0.0000, 19.131, 27.184, 60.157, 49.631, 33.166, 46.607, 91.582, 72.817, 69.473, 88.418, 65.195, 49.631, 62.720, 76.694},
			{110.53, 91.582, 88.418, 107.18, 146.83, 133.39, 119.84, 130.37, 160.87, 152.82, 160.87, 180.00, 117.28, 103.31, 114.81, 130.37, 65.195, 46.607, 53.690, 71.054, 66.891, 48.703, 44.341, 63.403, 86.721, 71.054, 60.157, 76.694, 112.95, 97.035, 86.164, 101.57, 133.39, 114.81, 108.95, 126.31, 131.30, 113.11, 116.60, 135.66, 108.95, 93.279, 103.31, 119.84, 82.965, 67.049, 78.429, 93.836, 27.184, 19.131, 0.0000, 19.131, 76.694, 62.720, 49.631, 65.195, 88.418, 69.473, 72.817, 91.582, 46.607, 33.166, 49.631, 60.157},
			{91.582, 72.817, 69.473, 88.418, 133.39, 126.31, 108.95, 114.81, 152.82, 160.87, 180.00, 160.87, 103.31, 93.279, 108.95, 119.84, 49.631, 33.166, 46.607, 60.157, 48.703, 31.860, 25.235, 44.341, 76.694, 65.195, 49.631, 62.720, 112.95, 101.57, 86.164, 97.035, 146.83, 130.37, 119.84, 133.39, 148.14, 131.30, 135.66, 154.77, 114.81, 103.31, 117.28, 130.37, 78.429, 67.049, 82.965, 93.836, 19.131, 27.184, 19.131, 0.0000, 86.721, 76.694, 60.157, 71.054, 107.18, 88.418, 91.582, 110.53, 53.690, 46.607, 65.195, 71.054},
			{114.81, 108.95, 126.31, 133.39, 88.418, 69.473, 72.817, 91.582, 119.84, 108.95, 93.279, 103.31, 160.87, 180.00, 160.87, 152.82, 133.39, 119.84, 130.37, 146.83, 97.035, 86.164, 101.57, 112.95, 62.720, 49.631, 65.195, 76.694, 44.341, 25.235, 31.860, 48.703, 60.157, 46.607, 33.166, 49.631, 93.836, 82.965, 67.049, 78.429, 130.37, 117.28, 103.31, 114.81, 154.77, 135.66, 131.30, 148.14, 71.054, 60.157, 76.694, 86.721, 0.0000, 19.131, 27.184, 19.131, 71.054, 65.195, 46.607, 53.690, 110.53, 91.582, 88.418, 107.18},
			{130.37, 119.84, 133.39, 146.83, 107.18, 88.418, 91.582, 110.53, 130.37, 114.81, 103.31, 117.28, 180.00, 160.87, 152.82, 160.87, 126.31, 108.95, 114.81, 133.39, 101.57, 86.164, 97.035, 112.95, 76.694, 60.157, 71.054, 86.721, 63.403, 44.341, 48.703, 66.891, 71.054, 53.690, 46.607, 65.195, 93.836, 78.429, 67.049, 82.965, 119.84, 103.31, 93.279, 108.95, 135.66, 116.60, 113.11, 131.30, 65.195, 49.631, 62.720, 76.694, 19.131, 0.0000, 19.131, 27.184, 60.157, 49.631, 33.166, 46.607, 91.582, 72.817, 69.473, 88.418},
			{117.28, 103.31, 114.81, 130.37, 110.53, 91.582, 88.418, 107.18, 146.83, 133.39, 119.84, 130.37, 160.87, 152.82, 160.87, 180.00, 108.95, 93.279, 103.31, 119.84, 82.965, 67.049, 78.429, 93.836, 65.195, 46.607, 53.690, 71.054, 66.891, 48.703, 44.341, 63.403, 86.721, 71.054, 60.157, 76.694, 112.95, 97.035, 86.164, 101.57, 133.39, 114.81, 108.95, 126.31, 131.30, 113.11, 116.60, 135.66, 46.607, 33.166, 49.631, 60.157, 27.184, 19.131, 0.0000, 19.131, 76.694, 62.720, 49.631, 65.195, 88.418, 69.473, 72.817, 91.582},
			{103.31, 93.279, 108.95, 119.84, 91.582, 72.817, 69.473, 88.418, 133.39, 126.31, 108.95, 114.81, 152.82, 160.87, 180.00, 160.87, 114.81, 103.31, 117.28, 130.37, 78.429, 67.049, 82.965, 93.836, 49.631, 33.166, 46.607, 60.157, 48.703, 31.860, 25.235, 44.341, 76.694, 65.195, 49.631, 62.720, 112.95, 101.57, 86.164, 97.035, 146.83, 130.37, 119.84, 133.39, 148.14, 131.30, 135.66, 154.77, 53.690, 46.607, 65.195, 71.054, 19.131, 27.184, 19.131, 0.0000, 86.721, 76.694, 60.157, 71.054, 107.18, 88.418, 91.582, 110.53},
			{160.87, 180.00, 160.87, 152.82, 114.81, 108.95, 126.31, 133.39, 88.418, 69.473, 72.817, 91.582, 119.84, 108.95, 93.279, 103.31, 130.37, 117.28, 103.31, 114.81, 154.77, 135.66, 131.30, 148.14, 133.39, 119.84, 130.37, 146.83, 97.035, 86.164, 101.57, 112.95, 62.720, 49.631, 65.195, 76.694, 44.341, 25.235, 31.860, 48.703, 60.157, 46.607, 33.166, 49.631, 93.836, 82.965, 67.049, 78.429, 110.53, 91.582, 88.418, 107.18, 71.054, 60.157, 76.694, 86.721, 0.0000, 19.131, 27.184, 19.131, 71.054, 65.195, 46.607, 53.690},
			{180.00, 160.87, 152.82, 160.87, 130.37, 119.84, 133.39, 146.83, 107.18, 88.418, 91.582, 110.53, 130.37, 114.81, 103.31, 117.28, 119.84, 103.31, 93.279, 108.95, 135.66, 116.60, 113.11, 131.30, 126.31, 108.95, 114.81, 133.39, 101.57, 86.164, 97.035, 112.95, 76.694, 60.157, 71.054, 86.721, 63.403, 44.341, 48.703, 66.891, 71.054, 53.690, 46.607, 65.195, 93.836, 78.429, 67.049, 82.965, 91.582, 72.817, 69.473, 88.418, 65.195, 49.631, 62.720, 76.694, 19.131, 0.0000, 19.131, 27.184, 60.157, 49.631, 33.166, 46.607},
			{160.87, 152.82, 160.87, 180.00, 117.28, 103.31, 114.81, 130.37, 110.53, 91.582, 88.418, 107.18, 146.83, 133.39, 119.84, 130.37, 133.39, 114.81, 108.95, 126.31, 131.30, 113.11, 116.60, 135.66, 108.95, 93.279, 103.31, 119.84, 82.965, 67.049, 78.429, 93.836, 65.195, 46.607, 53.690, 71.054, 66.891, 48.703, 44.341, 63.403, 86.721, 71.054, 60.157, 76.694, 112.95, 97.035, 86.164, 101.57, 88.418, 69.473, 72.817, 91.582, 46.607, 33.166, 49.631, 60.157, 27.184, 19.131, 0.0000, 19.131, 76.694, 62.720, 49.631, 65.195},
			{152.82, 160.87, 180.00, 160.87, 103.31, 93.279, 108.95, 119.84, 91.582, 72.817, 69.473, 88.418, 133.39, 126.31, 108.95, 114.81, 146.83, 130.37, 119.84, 133.39, 148.14, 131.30, 135.66, 154.77, 114.81, 103.31, 117.28, 130.37, 78.429, 67.049, 82.965, 93.836, 49.631, 33.166, 46.607, 60.157, 48.703, 31.860, 25.235, 44.341, 76.694, 65.195, 49.631, 62.720, 112.95, 101.57, 86.164, 97.035, 107.18, 88.418, 91.582, 110.53, 53.690, 46.607, 65.195, 71.054, 19.131, 27.184, 19.131, 0.0000, 86.721, 76.694, 60.157, 71.054},
			{119.84, 108.95, 93.279, 103.31, 160.87, 180.00, 160.87, 152.82, 114.81, 108.95, 126.31, 133.39, 88.418, 69.473, 72.817, 91.582, 60.157, 46.607, 33.166, 49.631, 93.836, 82.965, 67.049, 78.429, 130.37, 117.28, 103.31, 114.81, 154.77, 135.66, 131.30, 148.14, 133.39, 119.84, 130.37, 146.83, 97.035, 86.164, 101.57, 112.95, 62.720, 49.631, 65.195, 76.694, 44.341, 25.235, 31.860, 48.703, 71.054, 65.195, 46.607, 53.690, 110.53, 91.582, 88.418, 107.18, 71.054, 60.157, 76.694, 86.721, 0.0000, 19.131, 27.184, 19.131},
			{130.37, 114.81, 103.31, 117.28, 180.00, 160.87, 152.82, 160.87, 130.37, 119.84, 133.39, 146.83, 107.18, 88.418, 91.582, 110.53, 71.054, 53.690, 46.607, 65.195, 93.836, 78.429, 67.049, 82.965, 119.84, 103.31, 93.279, 108.95, 135.66, 116.60, 113.11, 131.30, 126.31, 108.95, 114.81, 133.39, 101.57, 86.164, 97.035, 112.95, 76.694, 60.157, 71.054, 86.721, 63.403, 44.341, 48.703, 66.891, 60.157, 49.631, 33.166, 46.607, 91.582, 72.817, 69.473, 88.418, 65.195, 49.631, 62.720, 76.694, 19.131, 0.0000, 19.131, 27.184},
			{146.83, 133.39, 119.84, 130.37, 160.87, 152.82, 160.87, 180.00, 117.28, 103.31, 114.81, 130.37, 110.53, 91.582, 88.418, 107.18, 86.721, 71.054, 60.157, 76.694, 112.95, 97.035, 86.164, 101.57, 133.39, 114.81, 108.95, 126.31, 131.30, 113.11, 116.60, 135.66, 108.95, 93.279, 103.31, 119.84, 82.965, 67.049, 78.429, 93.836, 65.195, 46.607, 53.690, 71.054, 66.891, 48.703, 44.341, 63.403, 76.694, 62.720, 49.631, 65.195, 88.418, 69.473, 72.817, 91.582, 46.607, 33.166, 49.631, 60.157, 27.184, 19.131, 0.0000, 19.131},
			{133.39, 126.31, 108.95, 114.81, 152.82, 160.87, 180.00, 160.87, 103.31, 93.279, 108.95, 119.84, 91.582, 72.817, 69.473, 88.418, 76.694, 65.195, 49.631, 62.720, 112.95, 101.57, 86.164, 97.035, 146.83, 130.37, 119.84, 133.39, 148.14, 131.30, 135.66, 154.77, 114.81, 103.31, 117.28, 130.37, 78.429, 67.049, 82.965, 93.836, 49.631, 33.166, 46.607, 60.157, 48.703, 31.860, 25.235, 44.341, 86.721, 76.694, 60.157, 71.054, 107.18, 88.418, 91.582, 110.53, 53.690, 46.607, 65.195, 71.054, 19.131, 27.184, 19.131, 0}
		};
		memcpy(GriffinCryMap, thisGriffinCryMap, sizeof(GriffinCryMap));

		double thisGriffinCryMapCombos[52][2] = {
			{0.0000, 64},
			{19.131, 128},
			{25.235, 64},
			{27.184, 64},
			{31.860, 64},
			{33.166, 48},
			{44.341, 128},
			{46.607, 96},
			{48.703, 128},
			{49.631, 96},
			{53.690, 48},
			{60.157, 96},
			{62.720, 48},
			{63.403, 64},
			{65.195, 96},
			{66.891, 64},
			{67.049, 64},
			{69.473, 64},
			{71.054, 96},
			{72.817, 64},
			{76.694, 96},
			{78.429, 64},
			{82.965, 64},
			{86.164, 64},
			{86.721, 48},
			{88.418, 128},
			{91.582, 128},
			{93.279, 48},
			{93.836, 64},
			{97.035, 64},
			{101.57, 64},
			{103.31, 96},
			{107.18, 64},
			{108.95, 96},
			{110.53, 64},
			{112.95, 64},
			{113.11, 64},
			{114.81, 96},
			{116.60, 64},
			{117.28, 48},
			{119.84, 96},
			{126.31, 48},
			{130.37, 96},
			{131.30, 128},
			{133.39, 96},
			{135.66, 128},
			{146.83, 48},
			{148.14, 64},
			{152.82, 64},
			{154.77, 64},
			{160.87, 128},
			{180.00, 64}
		};
		memcpy(GriffinCryMapCombos, thisGriffinCryMapCombos, sizeof(GriffinCryMapCombos));

		//----------------------------------------------------------------------------------------------------

		if(fSettings->WriteGriffinAddbackVector()) {
			for(int i = 0; i < 4; i++) {
				for(int j = 0; j < 16; j++) {
					GriffinCrystalCenterVectors[i+(j*4)] = GriffinCrystalCenterPosition(i,j);
					//std::cout << "cry = " << i << " det = " << j << " : x = " << GriffinCrystalCenterVectors[i+(j*4)].X() << " mm - y = " << GriffinCrystalCenterVectors[i+(j*4)].Y() << " mm - z = " << GriffinCrystalCenterVectors[i+(j*4)].Z() << " mm" << std::endl;
				}
			}
		}

		//add branches to input chain
		fChain.SetBranchAddress("eventNumber", &fEventNumber);
		fChain.SetBranchAddress("trackID", &fTrackID);
		fChain.SetBranchAddress("parentID", &fParentID);
		fChain.SetBranchAddress("stepNumber", &fStepNumber);
		fChain.SetBranchAddress("particleType", &fParticleType);
		fChain.SetBranchAddress("processType", &fProcessType);
		fChain.SetBranchAddress("systemID", &fSystemID);
		fChain.SetBranchAddress("detNumber", &fDetNumber);
		fChain.SetBranchAddress("cryNumber", &fCryNumber);
		fChain.SetBranchAddress("depEnergy", &fDepEnergy);
		fChain.SetBranchAddress("posx", &fPosx);
		fChain.SetBranchAddress("posy", &fPosy);
		fChain.SetBranchAddress("posz", &fPosz);
		fChain.SetBranchAddress("time", &fTime);

		//create output file
		fOutput = new TFile(outputFileName.c_str(),"recreate");
		if(!fOutput->IsOpen()) {
			std::cerr<<"Failed to open file '"<<outputFileName<<"', check permissions on directory and disk space!"<<std::endl;
			throw;
		}

		//set tree to belong to output file
		if(fSettings->WriteTree()) {
			fEventTree.SetDirectory(fOutput);
			if(fWriteFragmentTree) {
				fFragmentTree.SetDirectory(fOutput);
			}
		}

		//create branches for output tree
		// GRIFFIN
		fGriffin = new TGriffin;
		fEventTree.Branch("TGriffin", &fGriffin, fSettings->BufferSize());

		// BGO
		fBgo = new TBgo;
		fEventTree.Branch("TBgo", &fBgo, fSettings->BufferSize());

		// LaBr
		fLaBr = new TLaBr;
		fEventTree.Branch("TLaBr", &fLaBr, fSettings->BufferSize());

		// SCEPTAR
		fSceptar = new TSceptar;
		fEventTree.Branch("TSceptar", &fSceptar, fSettings->BufferSize());

		// DESCANT
		fDescant = new TDescant;
		fEventTree.Branch("TDescant", &fDescant, fSettings->BufferSize());

		// PACES
		fPaces = new TPaces;
		fEventTree.Branch("TPaces", &fPaces, fSettings->BufferSize());

		// Fragments
		fFragment = new TFragment;
		if(fWriteFragmentTree) {
			fFragmentTree.Branch("Fragment", &fFragment, fSettings->BufferSize());
		}
	}

Converter::~Converter() {
	if(fOutput->IsOpen()) {
		if(fSettings->WriteTree()) {
			fEventTree.Write("EventTree");
			if(fWriteFragmentTree) {
				fFragmentTree.Write("FragmentTree");
			}
		}
		fOutput->Close();
	}
}

bool Converter::Run() {
	int status;
	int eventNumber = 0;

	float smearedEnergy;
	std::map<int,int> belowThreshold;
	std::map<int,int> outsideTimeWindow;

	long int nEntries = fChain.GetEntries();

	TChannel* channel;
	for(int i = 0; i < nEntries; ++i) {
		status = fChain.GetEntry(i);
		if(status == -1) {
			std::cerr<<"Error occured, couldn't read entry "<<i<<" from tree "<<fChain.GetName()<<" in file "<<fChain.GetFile()->GetName()<<std::endl;
			continue;
		} else if(status == 0) {
			std::cerr<<"Error occured, entry "<<i<<" in tree "<<fChain.GetName()<<" in file "<<fChain.GetFile()->GetName()<<" doesn't exist"<<std::endl;
			return false;
		}

		//if this entry is from the next event, we fill the tree with everything we've collected so far (after SupressGriffinion) and reset the vector(s)
		if((fEventNumber != eventNumber) && ((fSettings->SortNumberOfEvents()==0)||(fSettings->SortNumberOfEvents()>=eventNumber))) {

			for(int j = 0; j < 16; j++) {
				GriffinNeighbours_counted[j] = 0;
			}

			if(fSettings->WriteTree()) {
				fEventTree.Fill(); // Tree contains suppressed data
				if(fWriteFragmentTree) {
					fFragmentTree.Fill();
				}
			}

			fGriffin->Clear();

			fBgo->Clear();

			fLaBr->Clear();

			fSceptar->Clear();

			fDescant->Clear();

			fPaces->Clear();

			eventNumber = fEventNumber;
			belowThreshold.clear();
			outsideTimeWindow.clear();

			if(fWriteFragmentTree) {
				fFragment->Clear();
			}
		}


		// if fSystemID is NOT GRIFFIN, then set fCryNumber to zero
		// This is a quick fix to solve resolution and threshold values from Settings.cc
		if(fSystemID >= 2000) {
			fCryNumber = 0;
		}
		//create energy-resolution smeared energy
		smearedEnergy = fRandom.Gaus(fDepEnergy,fSettings->Resolution(fSystemID,fDetNumber,fCryNumber,fDepEnergy));

		if((fSettings->SortNumberOfEvents()==0)||(fSettings->SortNumberOfEvents()>=fEventNumber) ) {
			//if the hit is above the threshold, we add it to the vector
			if(AboveThreshold(smearedEnergy, fSystemID)) {
				if(InsideTimeWindow() ) {
					//fFragment->SetCcLong();
					//fFragment->SetCcShort();
					fFragment->SetCfd(0);
					fFragment->SetCharge(smearedEnergy*700);
					fFragment->SetKValue(700);
					fFragment->SetMidasId(fFragmentTreeEntries);
					fFragment->SetMidasTimeStamp(fTime);
					fFragment->SetTimeStamp(fTime);
					//fFragment->SetZc();
					++fFragmentTreeEntries;
					if(fWriteFragmentTree) {
						fFragmentTree.Fill();
					}
					switch(fSystemID) {
						case 1000:
							// use addresses 0-63 for the 64 crystals
							fFragment->SetAddress(4*fDetNumber+fCryNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fGriffin->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;
						case 1010:
						case 1020:
						case 1030:
						case 1040:
						case 1050:
							// use addresses 1000-1999 for bgos
							fFragment->SetAddress(1000+100*fDetNumber+fCryNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fBgo->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;
						case 2000:
							fFragment->SetAddress(fSystemID+fDetNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fLaBr->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;
						case 3000:
							// use addresses 3000-3999 for bgos
							fFragment->SetAddress(fSystemID+100*fDetNumber+fCryNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fBgo->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;
						case 5000:
							fFragment->SetAddress(fSystemID+fDetNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fSceptar->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;
						case 6000:
							break;
						case 6010:
						case 6020:
						case 6030:
							break;
						case 8010:
						case 8020:
						case 8030:
						case 8040:
						case 8050:
							fFragment->SetAddress(8000+fDetNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fDescant->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;
						case 9000:
							fFragment->SetAddress(fSystemID+fDetNumber);
							channel = TChannel::GetChannel(fFragment->GetAddress());
							fPaces->AddFragment(std::shared_ptr<TFragment>(fFragment), channel);
							break;

						default:
							std::cerr<<"Unknown detector system ID "<<fSystemID<<std::endl;
							break;
					}
				} else {
					++outsideTimeWindow[fSystemID];
				}
			} else {
				++belowThreshold[fSystemID];
			}
		}

		if(i%1000 == 0 && fSettings->VerbosityLevel() > 0) {
			std::cout<<std::setw(3)<<100*i/nEntries<<"% done\r"<<std::flush;
		}
	}

	if(fSettings->VerbosityLevel() > 0) {
		std::cout<<"100% done"<<std::endl;

		if(fSettings->VerbosityLevel() > 1) {
			PrintStatistics();
		}
	}

	return true;
}

bool Converter::AboveThreshold(double energy, int systemID) {
	if(systemID == 5000) {
		// apply hard threshold of 50 keV on Sceptar
		// SCEPTAR in reality saturates at an efficiency of about 80%. In simulation we get an efficiency of 90%
		// 0.9 * 1.11111111 = 100%, 0.8*1.1111111 = 0.888888888
		if(energy > 50.0 && (fRandom.Uniform(0.,1.) < 0.88888888 )) {
			return true;
		}
		else {
			return false;
		}
	}
	else if(energy > fSettings->Threshold(fSystemID,fDetNumber,fCryNumber)+10*fSettings->ThresholdWidth(fSystemID,fDetNumber,fCryNumber)) {
		return true;
	}

	if(fRandom.Uniform(0.,1.) < 0.5*(TMath::Erf((energy-fSettings->Threshold(fSystemID,fDetNumber,fCryNumber))/fSettings->ThresholdWidth(fSystemID,fDetNumber,fCryNumber))+1)) {
		return true;
	}

	return false;
}

bool Converter::InsideTimeWindow() {
	if(fSettings->TimeWindow(fSystemID,fDetNumber,fCryNumber) == 0) {
		return true;
	}
	if(fTime < fSettings->TimeWindow(fSystemID,fDetNumber,fCryNumber)) {
		return true;
	}
	return false;
}

bool Converter::DescantNeutronDiscrimination() { // Assuming perfect gamma-neutron discrimination
	if(fParticleType == 5) { // neutron
		return true;
	}
	return false;
}



void Converter::PrintStatistics() {
}

TVector3 Converter::GriffinCrystalCenterPosition(int cry, int det) {

	double theta   = GriffinDetCoords[det][0]*(M_PI/180);
	double phi     = GriffinDetCoords[det][1]*(M_PI/180);

	//    double germanium_width                 = 56.5; // mm
	//    double germanium_separation            = 0.6; // mm
	//    double germanium_length                = 90.0; // mm
	double germanium_dist_from_can_face 	 = 5.5; // mm
	double can_face_thickness              = 1.5; //mm
	double distance_to_can_face            = fSettings->GriffinAddbackVectorCrystalFaceDistancemm(); // mm
	//    double germanium_shift                 = 1.05; // mm
	//    double germanium_bent_length           = 36.2; // mm
	//    double bent_end_angle                  = 22.5*M_PI/180.0; // rad
	// germanium_shift comment from GRIFFIN Geant4 code:
	// this can't be more than 2.75mm. It is the amount by which
	// one side is cut closer to the center than the other
	// the ending length of the cones

	double  depth   = fSettings->GriffinAddbackVectorDepthmm();
	//    double  offset  = germanium_bent_length*tan(bent_end_angle)/2.0;
	// this offset is to push the center of the crystal face towards the
	// center of the clover. We do this because the outter edges of the crystal
	// are tappered. We'll take half this value, which is about 7.5 mm.

	// double x0 = (germanium_width + germanium_separation)/2.0 - germanium_shift - offset;
	// double y0 = (germanium_width + germanium_separation)/2.0 - germanium_shift - offset;
	// We push the x and y directions towards the center of the clover by
	// germanium_shift. This is keeping things symmetric along the diagonal,
	// but in reality this doesn`t need to be the case if the core contact is
	// anti-symmetric.

	// From Andrews work, he says the center is x = y = 26 mm.
	double x0 = 26.0; // mm
	double y0 = 26.0; // mm

	double z0 = distance_to_can_face + can_face_thickness + germanium_dist_from_can_face + depth;

	double i = (double)(cry);
	double x = -1*((x0*(pow((-1),(floor((i+1.0)/2.0))))));
	double y = -1*((y0*(pow((-1),(floor((i+2.0)/2.0))))));
	double z = z0;

	TVector3 vec(transX(x,y,z,theta,phi),transY(x,y,z,theta,phi),transZ(x,y,z,theta,phi));
	return vec;
}

bool Converter::AreGriffinCrystalCenterPositionsWithinVectorLength(int cry1, int det1, int cry2, int det2){
	TVector3 vec1 = GriffinCrystalCenterPosition(cry1,det1);
	TVector3 vec2 = GriffinCrystalCenterPosition(cry2,det2);

	double x1 = vec1.X();
	double y1 = vec1.Y();
	double z1 = vec1.Z();
	double x2 = vec2.X();
	double y2 = vec2.Y();
	double z2 = vec2.Z();

	bool result = false;

	if( ((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2)) <= fSettings->GriffinAddbackVectorLengthmm()*fSettings->GriffinAddbackVectorLengthmm() ) {
		result = true;
	}

	return result;
}

double Converter::transX(double x, double y, double z, double theta, double phi){
	return (x*cos(theta)+z*sin(theta))*cos(phi)-y*sin(phi);
}

double Converter::transY(double x, double y, double z, double theta, double phi){
	return (x*cos(theta)+z*sin(theta))*sin(phi)+y*cos(phi);
}

double Converter::transZ(double x, double y, double z, double theta, double phi){
	return -x*sin(theta)+z*cos(theta);
}
